{"version":3,"sources":["logo.svg","Slider.js","SidebarItem.js","Progress.js","FileUpload.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Slider","min","max","value","handleChange","className","onChange","type","SidebarItem","name","active","handleClick","onClick","Progress","percentage","role","style","width","transition","FileUpload","onSubmit","uploadPercentage","file","message","uploadedFile","filename","id","htmlFor","DEFAULT_OPTIONS","property","range","unit","App","useState","selectedOptionIndex","setSelectedOptionIndex","options","setOptions","selectedOption","setUploadedFile","setMessage","setUploadPercentage","setFile","setFilename","e","a","preventDefault","formData","FormData","append","axios","post","headers","onUploadProgress","progressEvent","parseInt","Math","round","loaded","total","setTimeout","res","data","fileName","filePath","response","status","msg","target","files","filter","map","option","join","backgroundImage","index","key","prevOptions","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.3c0b2b41.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\r\n\r\nconst Slider = ({ min, max, value, handleChange }) => {\r\n  return (\r\n    <div className=\"slider-container\">\r\n      <input\r\n        min={min}\r\n        max={max}\r\n        value={value}\r\n        onChange={handleChange}\r\n        type=\"range\"\r\n        className=\"slider\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Slider;\r\n","import React from \"react\";\r\n\r\nconst SidebarItem = ({ name, active, handleClick }) => {\r\n  return (\r\n    <button\r\n      onClick={handleClick}\r\n      className={`sidebar-item ${active ? \"active\" : \"\"}`}\r\n    >\r\n      {name}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default SidebarItem;\r\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Progress = ({ percentage }) => {\n  return (\n    <div className=\"progress\">\n      <div\n        className=\"progress-bar\"\n        role=\"progressbar\"\n        style={{ width: `${percentage}%`, transition: \"width 1s ease-in-out\" }}\n      >\n        {percentage}%\n      </div>\n    </div>\n  );\n};\n\nProgress.propTypes = {\n  percentage: PropTypes.number.isRequired,\n};\n\nexport default Progress;\n","import React, { Fragment, useState } from \"react\";\nimport Message from \"./Message\";\nimport Progress from \"./Progress\";\nimport axios from \"axios\";\n\nconst FileUpload = ({\n  onSubmit,\n  file,\n  uploadPercentage,\n  message,\n  uploadedFile,\n  onChange,\n  filename,\n}) => {\n  return (\n    <Fragment>\n      <form onSubmit={onSubmit}>\n        <div>\n          <input\n            type=\"file\"\n            className=\"custom-file-input\"\n            id=\"customFile\"\n            onChange={onChange}\n          />\n          <label className=\"custom-file-label\" htmlFor=\"customFile\">\n            {filename}\n          </label>\n        </div>\n\n        <Progress percentage={uploadPercentage} />\n\n        <input type=\"submit\" value=\"Upload\" className=\"custom-file-label\" />\n      </form>\n    </Fragment>\n  );\n};\n\nexport default FileUpload;\n","import React, { useContext, useState } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Slider from \"./Slider\";\nimport SidebarItem from \"./SidebarItem\";\nimport FileUpload from \"./FileUpload\";\nimport axios from \"axios\";\n\nconst DEFAULT_OPTIONS = [\n  {\n    name: \"Brightness\",\n    property: \"brightness\",\n    value: 100,\n    range: {\n      min: 0,\n      max: 200,\n    },\n    unit: \"%\",\n  },\n  {\n    name: \"Contrast\",\n    property: \"contrast\",\n    value: 100,\n    range: {\n      min: 0,\n      max: 200,\n    },\n    unit: \"%\",\n  },\n  {\n    name: \"Saturation\",\n    property: \"saturate\",\n    value: 100,\n    range: {\n      min: 0,\n      max: 200,\n    },\n    unit: \"%\",\n  },\n  {\n    name: \"Grayscale\",\n    property: \"grayscale\",\n    value: 0,\n    range: {\n      min: 0,\n      max: 100,\n    },\n    unit: \"%\",\n  },\n  {\n    name: \"Sepia\",\n    property: \"sepia\",\n    value: 0,\n    range: {\n      min: 0,\n      max: 100,\n    },\n    unit: \"%\",\n  },\n  {\n    name: \"Hue Rotate\",\n    property: \"hue-rotate\",\n    value: 0,\n    range: {\n      min: 0,\n      max: 360,\n    },\n    unit: \"deg\",\n  },\n  {\n    name: \"Blur\",\n    property: \"blur\",\n    value: 0,\n    range: {\n      min: 0,\n      max: 20,\n    },\n    unit: \"px\",\n  },\n];\n\nfunction App() {\n  const [selectedOptionIndex, setSelectedOptionIndex] = useState(0);\n  const [options, setOptions] = useState(DEFAULT_OPTIONS);\n  const selectedOption = options[selectedOptionIndex];\n  const [uploadedFile, setUploadedFile] = useState({});\n  const [message, setMessage] = useState(\"\");\n  const [uploadPercentage, setUploadPercentage] = useState(0);\n  const [file, setFile] = useState(\"\");\n  const [filename, setFilename] = useState(\"Choose File\");\n\n  const onChange = (e) => {\n    setFile(e.target.files[0]);\n    setFilename(e.target.files[0].name);\n  };\n\n  const onSubmit = async (e) => {\n    e.preventDefault();\n    const formData = new FormData();\n    formData.append(\"file\", file);\n\n    try {\n      const res = await axios.post(\"/upload\", formData, {\n        headers: {\n          \"Content-Type\": \"multipart/form-data\",\n        },\n        onUploadProgress: (progressEvent) => {\n          setUploadPercentage(\n            parseInt(\n              Math.round((progressEvent.loaded * 100) / progressEvent.total)\n            )\n          );\n\n          // Clear percentage\n          setTimeout(() => setUploadPercentage(0), 10000);\n        },\n      });\n\n      const { fileName, filePath } = res.data;\n\n      setUploadedFile({ fileName, filePath });\n\n      setMessage(\"File Uploaded\");\n    } catch (err) {\n      if (err.response.status === 500) {\n        setMessage(\"There was a problem with the server\");\n      } else {\n        setMessage(err.response.data.msg);\n      }\n    }\n  };\n\n  function handleSliderChange({ target }) {\n    setOptions((prevOptions) => {\n      return prevOptions.map((option, index) => {\n        if (index !== selectedOptionIndex) return option;\n        return { ...option, value: target.value };\n      });\n    });\n  }\n\n  function getImageStyle() {\n    const filters = options.map((option) => {\n      return `${option.property}(${option.value}${option.unit})`;\n    });\n\n    return {\n      filter: filters.join(\" \"),\n      backgroundImage: `url(${uploadedFile.filePath})`,\n    };\n  }\n  return (\n    <div className=\"container\">\n      <div className=\"file-upload\">\n        <FileUpload\n          onSubmit={onSubmit}\n          file={file}\n          uploadPercentage={uploadPercentage}\n          message={message}\n          filename={filename}\n          uploadedFile={uploadedFile}\n          onChange={onChange}\n        />\n      </div>\n\n      <div style={getImageStyle()} className=\"main-image\" />\n      <div className=\"sidebar\">\n        {options.map((option, index) => {\n          return (\n            <SidebarItem\n              key={index}\n              name={option.name}\n              active={index === selectedOptionIndex}\n              handleClick={() => setSelectedOptionIndex(index)}\n            />\n          );\n        })}\n      </div>\n      <Slider\n        min={selectedOption.range.min}\n        max={selectedOption.range.max}\n        value={selectedOption.value}\n        handleChange={handleSliderChange}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}